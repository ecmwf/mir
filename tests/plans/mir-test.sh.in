#!/usr/bin/env bash
#
# (C) Copyright 1996- ECMWF.
#
# This software is licensed under the terms of the Apache Licence Version 2.0
# which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
#
# In applying this licence, ECMWF does not waive the privileges and immunities
# granted to it by virtue of its status as an intergovernmental organisation nor
# does it submit to any jurisdiction.

set -eaux

echo "======> $1"

t=$(basename $1)

mir="$<TARGET_FILE:mir-tool>"
diff="@DIFF_TOOL@"
mars_script="@MARS_SCRIPT@"

tests_plans_dir="@CMAKE_CURRENT_SOURCE_DIR@"
tmp_plans_dir="@CMAKE_CURRENT_BINARY_DIR@"

pwd

state=mars
while read n
do
    if [[ "$n" = "" ]]
    then
        continue
    fi
    echo $n
    case $n in
        \#*)
            ;;

        *)
        case $state in

            mars)
            m=$(echo $n)
            if [[ -a "$m" ]]
            then
                ln -sf "$m" data.in.$t
            else
                m=$(echo $n | tr '/' '_')
                if [[ -f "${tests_plans_dir}/$m" ]]
                then
                    ln -sf "${tests_plans_dir}/$m" data.in.$t
                elif [[ -f "${tmp_plans_dir}/$m" ]]
                then
                    ln -sf "${tmp_plans_dir}/$m" data.in.$t
                else
                    echo "retrieve,$n,target=data.in.$t" > mars.r.$t
                    $mars_script mars.r.$t || rm data.in.$t
                    cp data.in.$t "${tmp_plans_dir}/$m"
                fi
            fi
            state=mir
            ;;

            mir)
            eval n=\"$n\"
            rm -f plan.${t}{,.reference}
            $mir --dryrun --dump-plan-file=plan.$t $n data.in.$t data.out.$t
            # For some reason set -e does not trigger
            [[ $? -eq 0 ]] || exit 1
            state=plan
            ;;

            plan)
            echo "$n" >> plan.${t}.reference
            ;;

        esac
        ;;


    esac
done < $1

if [[ "$state" == "plan" ]] && [[ -r plan.${t} ]]  && [[ -r plan.${t}.reference ]]
then
    $diff plan.${t} plan.${t}.reference
    if [[ $? -eq 0 ]]
    then
        state=done
    fi
fi

if [[ "$state" != "done" ]]
then
    echo "No plan defined"
    exit 1
fi
